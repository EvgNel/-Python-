Задача 1
Задача 1.1
Считать данные с помощью pandas
[2]
import pandas as pd
df = pd.read_csv('kc_house_data.csv')
[3]
df.head()

Задача 1.2
Создать новый признак delta_renovated, который будет содержать разницу в годах между годом реновацией дома и годом постройки дома
Если реновации дома не было, то в новом признаке поставьте 0
[4]
df['delta_renovated'] = (df['yr_renovated'] - df['yr_built']).apply(lambda x: x if x > 0 else 0)
df.head()

Задача 1.3
Создайте признаки года продажи, месяца продажи
[5]
df['year'] = df['date'].apply(lambda x: int(x[:4]))
df['month'] = df['date'].apply(lambda x: int(x[4:6]))
df[['date', 'year', 'month']].head()

Задача 1.4
Удалите признаки date, zipcode, lat, long
[6]
df.drop(columns=['date', 'zipcode', 'lat', 'long'], inplace=True)
df.head()

Задача 2
-Создайте датафрейм с клиентами:

[7]
clients = pd.DataFrame({
                        'client_id': [1459, 4684, 3498, 3942, 4535, 2308, 2866, 2765, 1472, 4236, 2295,
                                  939, 3840, 280, 20, 4332, 3475, 4213, 3113, 4809, 2134, 2242,
                                  2068, 4929, 1384, 1589, 3317, 2260, 1727, 1764, 1611, 1474],
                        'house_id': [8965450190, 6823100225, 5104540330, 2131701075, 1522700060,
                                1189000207, 6821600300, 7137950720, 9510920050, 6131600255,
                                5428000070, 1788800910, 8100400160, 3123049142, 6306800010,
                                5083000375, 7920100025, 1951600150, 809001400, 339600110,
                                1622049154, 1099600250, 8563000110, 2768100205, 3995700435,
                                8861700030, 3303980210, 7731100066, 8146100580, 825069097,
                                3889100029, 9524100196]
                        })
clients.head()

Задача 2.1
-Присоедините к таблице clients данные по домам через метод join

[8]
df_clients_houses = clients.join(df.set_index('id'), on='house_id')
df_clients_houses.head()

Задача 2.2
Присоедините к таблице clients данные по домам через метод merge
Это нужно, чтобы понимать, какие дома покупались клиентами house_id - это индексы датафрейма с домами
[9]
clients_merge = clients.merge(df, left_on='house_id', right_on='id')
clients_merge.head()

Задача 3
-Составьте несколько сводных таблиц

Задача 3.1
Найдите среднюю стоимость домов в зависимости от количества спален.
Отсортируйте от меньшей стоимости к большей
[10]
df.groupby('bedrooms').agg({'price': 'mean'}).sort_values('price').style.format({"price":"{:.2f}"})

Задача 3.2
Найдите минимальную, среднюю и максимальную стоимости домов в зависимости от состояния дома
[11]
df.groupby('condition').agg({'price': ['min', 'mean', 'max']})

Задача 3.3
Постройте таблицу с подсчетом количества домов в данных в зависимости от вида на набережную и оценкой вида
[12]
df.pivot_table(index='waterfront', columns='view', values='id', aggfunc='count', fill_value=0)


Задача 3.4
Каких домов в зависимости от этажности и количества спален больше?
[13]
pd.crosstab(index=df['floors'], columns=df['bedrooms'])

Задача 3.5
Постройте таблицу с подсчетом медианной стоимости домов в данных в зависимости от состояния дома и оценки дома
[14]
df.pivot_table(index='condition', columns='grade', aggfunc='median', values='price', fill_value=0)

